EJB
컨테이너기술 트랜잭션 분산기술 이런 것이 잘되었음
그러나 당시에 비싼 문제가 있었다.

진짜 복잡하고 어렵고 느리다.
단순하고 편해야 좋은데 어렵다.
인터페이스를 다 구현해야해서 매우 코드가 지저분해졌다.

순수하게 돌아가자해서 POJO 순수한 자바를 사용하자는 말이 나오게 되었다.
여기에서 두명의 개발자가 나오게 된다.
하이버네이트를 만든 사람 스플이만든 로드존슨

EJB 컨테이너 대체 단순함의 승리 현재 사실상 표준기술

EJB 엔티티빈 -> 하이버네이트 -> JPA

그러나 오픈소스의 단점 특화된것들이 있다.

스프링 역사
2002년 로드존슨이 책을 출간하며 시작
EJB문제점지적 

EJB 없이도 충분히 고품질의 확장 가능한 애플리케이션을 개발할 수 있음을 보여주고, 30,000라인 이상의 기반 기술을 예제 코드로 선보임

여기에 지금의 스프링 핵심 개념과 기반 코드가 들어가 있음BeanFactory, ApplicationContext, POJO, 제어의 역전, 의존관계 주입

책이 유명해지고, 개발자들이 책의 예제 코드를 프로젝트에 사용

시작이 처음으로 가게 될 것.

스프링역사 릴리즈

2003년 스프링 프레임워크 1.0 출시 - XML
2006년 스프링 프레임워크 2.0 출시 - XML 편의 기능 지원
2009년 스프링 프레임워크 3.0 출시 - 자바 코드로 설정
2013년 스프링 프레임워크 4.0 출시 - 자바8
2014년 스프링 부트 1.0 출시
2017년 스프링 프레임워크 5.0, 스프링 부트 2.0 출시 - 리엑티브 프로그래밍 지원
2020년 9월 현재 스프링 프레임워크 5.2.x, 스프링 부트 2.3.x
2024년 현재 --> 더 진행중!!

sec02 스프링이란 무엇인가?

스프링 프레임워크
핵심 기술: 스프링 DI 컨테이너, AOP, 이벤트, 기타
웹 기술: 스프링 MVC, 스프링 WebFlux
데이터 접근 기술: 트랜잭션, JDBC, ORM 지원, XML 지원
기술 통합: 캐시, 이메일, 원격접근, 스케줄링
테스트: 스프링 기반 테스트 지원
언어: 코틀린, 그루비
최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 편리하게 사용

스프링 부트
스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용
단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
손쉬운 빌드 구성을 위한 starter 종속성 제공
스프링과 3rd party(외부) 라이브러리 자동 구성
메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공
관례에 의한 간결한 설정

스프링 단어?
스프링이라는 단어는 문맥에 따라 다르게 사용된다.
스프링 DI 컨테이너 기술
스프링 프레임워크
스프링 부트, 스프링 프레임워크 등을 모두 포함한 스프링 생태계

결론적으로 스프링을 왜만들었는가?

스프링의 핵심 개념, 컨셉?
웹 애플리케이션 만들고, DB 접근 편리하게 해주는 기술?
전자정부 프레임워크?
웹 서버도 자동으로 띄워주고?
클라우드, 마이크로서비스?

스프링의 진짜 핵심
스프링은 자바 언어 기반의 프레임워크
자바 언어의 가장 큰 특징 - 객체 지향 언어
스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크

스프링 은 중요하다.

sec03
좋은 객체지향 프로그램이란?

객체 지향 프로그래밍
객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러
개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지
를 주고받고, 데이터를 처리할 수 있다. (협력)
객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프
트웨어 개발에 많이 사용된다

유연하고, 변경이 용이?
레고 블럭 조립하듯이
키보드, 마우스 갈아 끼우듯이
컴퓨터 부품 갈아 끼우듯이
컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법

다형성

다형성의 실세계 비유
실세계와 객체 지향을 1:1로 매칭X
그래도 실세계의 비유로 이해하기에는 좋음
역할과 구현으로 세상을 구분

다형성의 실세계 비유
예시
운전자 - 자동차
공연 무대
키보드, 마우스, 세상의 표준 인터페이스들
정렬 알고리즘
할인 정책 로직

역할과 구현을 분리
역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
장점
클라이언트는 대상의 역할(인터페이스)만 알면 된다.
클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.

역할과 구현을 분리
자바 언어
자바 언어의 다형성을 활용
역할 = 인터페이스
구현 = 인터페이스를 구현한 클래스, 구현 객체
객체를 설계할 때 역할과 구현을 명확히 분리
객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기










